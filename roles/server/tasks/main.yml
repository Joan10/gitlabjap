- name: Install local dependencies
  local_action: command yum -y install python2-pyvmomi
  tags:
    - always


- name: Clone a virtual machine from Template and customize
  vmware_guest:
    hostname: "{{ VMWARE_HOST }}"
    username: "{{ VMWARE_USER }}"
    password: "{{ VMWARE_PASSWORD }}"
    validate_certs: False
    datacenter: "{{ VMWARE_DATACENTER }}"
    cluster: "{{ VMWARE_CLUSTER }}"
    name: "{{ hostname }}"
    template: "{{ template_name }}"
    folder: "{{ template_folder }}"
    networks:
    - name: "{{ network }}"
      ip: "{{ ip }}"
      netmask: "{{ netmask }}"
      gateway: "{{ gateway }}"
  delegate_to: localhost
  tags:
    - vsphere
    - create

- name: Move Virtual Machine
  vmware_guest_move:
    hostname: "{{ VMWARE_HOST }}"
    username: "{{ VMWARE_USER }}"
    password: "{{ VMWARE_PASSWORD }}"
    datacenter: "{{ VMWARE_DATACENTER }}"
    validate_certs: no
    name: "{{ hostname }}"
    dest_folder: "{{ destination_folder }}"
  delegate_to: localhost
  register: facts
  tags:
    - vsphere
    - move

- name: Poweron Virtual Machine
  vmware_guest:
    hostname: "{{ VMWARE_HOST }}"
    username: "{{ VMWARE_USER }}"
    password: "{{ VMWARE_PASSWORD }}"
    datacenter: "{{ VMWARE_DATACENTER }}"
    validate_certs: no
    name: "{{ hostname }}"
    state: poweredon
  delegate_to: localhost
  register: facts
  tags:
    - vsphere
    - poweron


- name: Wait for system to become reachable over WinRM
  wait_for_connection:
    timeout: 900
  tags:
    - vsphere

- name: Gather facts for first time
  setup:
  tags:
    - always

- name: Restart network service. For some reason weirdly needed beforce next step.
  service: name=NetworkManager state=restarted
  tags:
    - config
    - network

- nmcli:
    conn_name: eth0
    type: ethernet
    dns4:
      - "{{ eth0_dnsserver }}"
    state: present
  tags:
    - config
    - network

- name: Restart network service
  service: name=NetworkManager state=restarted
  tags:
    - config
    - network

- name: YUM update
  command: yum -y update
  tags:
    - config
    - pkgupdate

- name: Check if EPEL repo is already configured.
  stat: path={{ epel_repofile_path }}
  register: epel_repofile_result
  tags:
    - config
    - epel
 
- name: Install EPEL repo.
  yum:
    name: "{{ epel_repo_url }}"
    state: present
  register: result
  when: not epel_repofile_result.stat.exists
  tags:
    - config
    - epel
 
- name: Import EPEL GPG key.
  rpm_key:
    key: "{{ epel_repo_gpg_key_url }}"
    state: present
  when: not epel_repofile_result.stat.exists
  tags:
    - config
    - epel

- hostname:
    name: "{{ hostname }}"

- name: update hosts
  template: src=hosts.j2 dest=/etc/hosts backup=yes owner=root group=root mode=0644
  tags: 
    - config
    - hosts
   
- name: be sure ntp is installed
  yum: name=ntp state=installed
  tags: 
    - config
    - ntp

- name: be sure ntp is configured
  template: src=ntp.conf.j2 dest=/etc/ntp.conf
  notify:
    - restart ntpd
  tags: 
    - config
    - ntp

- name: be sure ntpd is running and enabled
  service: name=ntpd state=started enabled=yes
  tags: 
    - config
    - ntp

- name: Install docker
  yum:
    name: docker
    state: present
  tags: 
    - config
    - docker

- name: Install docker-compose
  yum:
    name: docker-compose
    state: present
  tags: 
    - config
    - docker


- name: Install python
  yum:
    name: python
    state: present
  tags:
    - config
    - docker

- name: Install docker-py
  yum:
    name: python-docker-py
    state: present
  tags:
    - config
    - docker


- name: Install PyYAML
  yum:
    name: PyYAML
    state: present
  tags:
    - config
    - docker

- name: Deploy Ansible SSH Key in authorized_keys
  authorized_key:
    user: root
    state: present
    key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDBPPhUSMrjI0gVk2hjV5o5z07HgeNQfa/iafkOE6PP04khMhaoTYdgpqDWT27rAxCK2apkCXjMB9FhRhiQ5p+Yuv4R+Uw0LphibpYc+dCD5Prp9yJxC8LOp1oMEiqyAneABIH2Kaz5O9i9D7f6aNVg4PCO6UqX7bDoIuBBHnnzzdVeTCV2K1r84yHKRBtXdJq/dC9EjwBtUbGABiB4vhhgnYJuyiFl5Iap8Ib2LW5di8NhwS5wp7GgK5YLGZb+09YGk0pDdGthWu+LoEmYmKNALcUhAVWj7C9Be97crIuuGNWy69FdTkaCpwSJPT+jW2bMXXF83UZUP5X7ZiR43Eyd root@ansible"
  tags:
    - config
    - users


- name: Add local users
  user:
    name: "{{ item.name }}"
    shell: /bin/bash
    groups: "{{ item.group | default([]) }}"
    append: yes
  with_items:
    - "{{ users }}"
  tags:
    - config
    - users

- name: Add local users to sudo
  user:
    name: "{{ item.name }}"
    shell: /bin/bash
    groups: wheel
    append: yes
  with_items:
    - "{{ users }}"
  when: item.sudo
  tags:
    - config
    - users

- name: Deploy User SSH Key in authorized_keys
  authorized_key:
    user: "{{ item.name }}"
    state: present
    key: "{{ item.key }}"
  with_items:
    - "{{ users }}"
  tags:
    - config
    - users
 
